@###############################################
@#
@# PX4 ROS compatible message source code
@# generation for C++
@#
@# EmPy template for generating <msg>.h files
@# Based on the original template for ROS
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of the .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@###############################################
/****************************************************************************
 *
 *   Copyright (C) 2013-2015 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file @file_name_in */

@{
import genmsg.msgs
import gencpp

uorb_struct = '%s_s'%spec.short_name
uorb_pack_func = 'pack_%s'%spec.short_name
topic_name = spec.short_name
}@

#include <px4_config.h>
#include <drivers/drv_orb_dev.h>

@{
if spec.short_name.startswith("actuator_controls"):
    print('#include "actuator_controls.h"')
}@

@{
if spec.short_name.startswith("mission"):
    print('// XXX onboard and offboard mission are still declared here')
    print('// until this is generator supported')
    print('#include <navigator/navigation.h>')
}@

#include "@(topic_name).h"

@# join all msg files in one line e.g: "float[3] position;float[3] velocity;bool armed"
const char * __orb_@(topic_name)_fields = "@(";".join(["%s %s" % field for field in spec.fields()]))";

void pack_@(topic_name)(void *in_buffer, void *out_buffer)
{
   struct @(uorb_struct)* s_buffer = (struct @(uorb_struct) *) in_buffer;
   struct @(uorb_struct)_packed *packed_s_buffer = (struct @(uorb_struct)_packed *) out_buffer;
@# for each field: memcpy(&packed_s_buffer->foo, &s_buffer->foo, sizeof(s_buffer->foo));
@{
memexpr = "   memcpy(&packed_s_buffer->{field}, &s_buffer->{field}, sizeof(s_buffer->{field}));"
# loop over all fields and print the type and name
for each_field in spec.parsed_fields():
  if not each_field.is_header:
    print(memexpr.format(field=each_field.name))
}@
}

@[for topic in spec.topics]@
ORB_DEFINE(@topic, struct @uorb_struct, &@uorb_pack_func);
@[end for]
